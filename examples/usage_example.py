from pathlib import Path

# Importa os componentes p√∫blicos da biblioteca
from cocomo_py import (
    analyze_kloc,
    calculate,
    ProjectMode,
    ClocNotFoundError,
    AnalysisError
)

def main():
    """
    Fun√ß√£o principal que demonstra o uso da biblioteca cocomo-py.
    """
    print("üöÄ Demonstrando o uso da biblioteca cocomo-py üöÄ")

    # NOTA: Altere este caminho para uma pasta de projeto real na sua m√°quina.
    # Para este exemplo, vamos tentar analisar o pr√≥prio projeto cocomo-py.
    project_path = Path(__file__).parent.parent 

    if not project_path.exists() or not project_path.is_dir():
        print(f"‚ùå O caminho '{project_path}' n√£o √© um diret√≥rio v√°lido.")
        return

    try:
        # --- 1. An√°lise do C√≥digo-Fonte ---
        print(f"\n[1] Analisando o c√≥digo-fonte em: {project_path}...")
        kloc = analyze_kloc(project_path)
        print(f"‚úÖ An√°lise conclu√≠da: {kloc:.2f} KLOC")

        # --- 2. Exemplo de C√°lculo B√°sico ---
        print("\n[2] Executando um c√°lculo COCOMO B√°sico (Modo Org√¢nico)...")
        basic_result = calculate(
            kloc=kloc,
            mode=ProjectMode.ORGANIC,
            cost_per_month=10000
        )
        print("--- Resultados (B√°sico) ---")
        print(f"  Esfor√ßo: {basic_result.effort_person_months:.2f} pessoas-m√™s")
        print(f"  Custo Total: R$ {basic_result.total_cost:,.2f}")

        # --- 3. Exemplo de C√°lculo Intermedi√°rio ---
        print("\n[3] Executando um c√°lculo COCOMO Intermedi√°rio...")
        drivers = {
            "rely": "high",  # O projeto exige alta fiabilidade
            "cplx": "high",  # A complexidade √© alta
            "tool": "vhigh"  # Usamos ferramentas muito boas
        }
        intermediate_result = calculate(
            kloc=kloc,
            mode=ProjectMode.SEMI_DETACHED,
            cost_per_month=10000,
            drivers=drivers
        )
        print("--- Resultados (Intermedi√°rio) ---")
        print(f"  Fator de Ajuste (EAF): {intermediate_result.eaf:.3f}")
        print(f"  Esfor√ßo: {intermediate_result.effort_person_months:.2f} pessoas-m√™s")
        print(f"  Custo Total: R$ {intermediate_result.total_cost:,.2f}")

    except ClocNotFoundError:
        print("\n‚ùå Erro: O comando 'cloc' n√£o foi encontrado.")
        print("   Por favor, instale-o e garanta que est√° no seu PATH.")
    except AnalysisError as e:
        print(f"\n‚ùå Erro durante a an√°lise: {e}")
    except Exception as e:
        print(f"\n‚ùå Ocorreu um erro inesperado: {e}")

if __name__ == "__main__":
    main()
